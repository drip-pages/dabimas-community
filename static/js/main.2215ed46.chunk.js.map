{"version":3,"sources":["assets/img/logo.png","serviceWorker.js","utils/polyfillClosest/index.tsx","components/Credit/index.tsx","pages/Maintenance/index.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","polyfill","Element","prototype","matches","msMatchesSelector","webkitMatchesSelector","closest","s","this","el","parentElement","parentNode","nodeType","Credit","react","className","lang","Maintenance","src","logoImage","alt","components_Credit","elementClosest","process","REACT_APP_SENTRY_DSN","Sentry","dsn","smoothscroll","ReactDOM","render","react_default","a","createElement","pages_Maintenance","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uQCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCjBN,IAuBeC,EAvBE,SAACJ,GACXA,EAAOK,QAAQC,UAAUC,UAC5BP,EAAOK,QAAQC,UAAUC,QACvBP,EAAOK,QAAQC,UAAUE,mBAAqBR,EAAOK,QAAQC,UAAUG,uBAGtET,EAAOK,QAAQC,UAAUI,UAC5BV,EAAOK,QAAQC,UAAUI,QAAU,SAASC,GAC1C,GAAIC,KAAKL,QAAQI,GACf,OAAOC,KAET,IAAIC,EAAUD,KAAKE,eAAiBF,KAAKG,WACzC,EAAG,CACD,GAAIF,EAAGN,QAAQI,GACb,OAAOE,EAETA,EAAKA,EAAGC,eAAiBD,EAAGE,iBACd,OAAPF,GAA+B,IAAhBA,EAAGG,UAC3B,OAAO,4CCVEC,UANU,kBACvBC,EAAA,qBAAKC,UAAU,SAASC,KAAK,MAA7B,+BC4BaC,EA3BgB,kBAC7BH,EAAA,qBAAKC,UAAU,eACbD,EAAA,qBAAKC,UAAU,gBACbD,EAAA,qBAAKC,UAAU,YACbD,EAAA,qBAAKC,UAAU,OAAOG,IAAKC,IAAWC,IAAI,iBAC1CN,EAAA,qBAAKC,UAAU,aACbD,EAAA,qBAAKC,UAAU,SAAf,sEACAD,EAAA,qBAAKC,UAAU,WACbD,EAAA,+RACAA,EAAA,mBAAGC,UAAU,aAAb,0SAGAD,EAAA,mBAAGC,UAAU,aAAb,iWAIAD,EAAA,mBAAGC,UAAU,aAAb,yPAORD,EAAA,cAACO,EAAD,QChBJC,EAAe1B,QAIX2B,8CAAYC,sBACdC,IAAY,CAAEC,IAAKH,8CAAYC,uBAMjCG,IAAa3B,WAEb4B,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAD,MAAiBC,SAASC,eAAe,SJwGnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2215ed46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7ffa0f56.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// FIXME: any 使ってるのやめたい...\nconst polyfill = (window: any) => {\n  if (!window.Element.prototype.matches) {\n    window.Element.prototype.matches =\n      window.Element.prototype.msMatchesSelector || window.Element.prototype.webkitMatchesSelector\n  }\n\n  if (!window.Element.prototype.closest) {\n    window.Element.prototype.closest = function(s: string): any {\n      if (this.matches(s)) {\n        return this\n      }\n      let el: any = this.parentElement || this.parentNode\n      do {\n        if (el.matches(s)) {\n          return el\n        }\n        el = el.parentElement || el.parentNode\n      } while (el !== null && el.nodeType === 1)\n      return null\n    }\n  }\n}\n\nexport default polyfill\n","import * as React from 'react'\nimport './Credit.css'\n\nconst Credit: React.FC = () => (\n  <div className=\"Credit\" lang=\"en\">\n    ©︎ 2016 ParityBit\n  </div>\n)\n\nexport default Credit\n","import * as React from 'react'\nimport './Maintenance.css'\nimport logoImage from '../../assets/img/logo.png'\nimport Credit from '../../components/Credit'\n\nconst Maintenance: React.SFC = () => (\n  <div className=\"Maintenance\">\n    <div className=\"message-area\">\n      <div className=\"logoArea\">\n        <img className=\"logo\" src={logoImage} alt=\"ロゴ\" />\n        <div className=\"text-area\">\n          <div className=\"title\">サービスは終了しました</div>\n          <div className=\"message\">\n            <p>このたびダビコミュβは2020年12月15日（火） 13:00をもちまして、サービスの提供を終了いたしました。</p>\n            <p className=\"paragraph\">\n              ダビコミュβをご愛顧頂きました皆様には、深くお詫びを申し上げるとともに、心より御礼を申し上げます。\n            </p>\n            <p className=\"paragraph\">\n              なお、『ダービースタリオン\n              マスターズ（ダビマス）』につきましては、引き続きプレイいただけますのでご安心くださいませ。\n            </p>\n            <p className=\"paragraph\">\n              引き続き『ダービースタリオン マスターズ（ダビマス）』をよろしくお願いいたします。\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n    <Credit />\n  </div>\n)\n\nexport default Maintenance\n","/* eslint-disable import/first */\nimport 'babel-polyfill'\nimport 'promise-polyfill/src/polyfill'\nimport 'whatwg-fetch'\nimport smoothscroll from 'smoothscroll-polyfill'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\n// Element.closest polyfill\nimport elementClosest from './utils/polyfillClosest'\nelementClosest(window)\n\n// sentry\nimport * as Sentry from '@sentry/browser'\nif (process.env.REACT_APP_SENTRY_DSN) {\n  Sentry.init({ dsn: process.env.REACT_APP_SENTRY_DSN })\n}\n\nimport Maintenance from './pages/Maintenance'\n\n// scroll polyfill\nsmoothscroll.polyfill()\n\nReactDOM.render(<Maintenance />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}